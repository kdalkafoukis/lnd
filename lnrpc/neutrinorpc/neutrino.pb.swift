// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: neutrinorpc/neutrino.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Neutrinorpc_StatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_StatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Indicates whether the neutrino backend is active or not.
  var active: Bool = false

  /// Is fully synced.
  var synced: Bool = false

  /// Best block height.
  var blockHeight: Int32 = 0

  /// Best block hash.
  var blockHash: String = String()

  /// Connected peers.
  var peers: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_AddPeerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Peer to add.
  var peerAddrs: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_AddPeerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_DisconnectPeerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Peer to disconnect.
  var peerAddrs: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_DisconnectPeerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_IsBannedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Peer to lookup.
  var peerAddrs: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_IsBannedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var banned: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_GetBlockHeaderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Block hash in hex notation.
  var hash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_GetBlockHeaderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The block hash (same as provided).
  var hash: String = String()

  /// The number of confirmations.
  var confirmations: Int64 = 0

  /// The block size excluding witness data.
  var strippedSize: Int64 = 0

  /// The block size (bytes).
  var size: Int64 = 0

  /// The block weight as defined in BIP 141.
  var weight: Int64 = 0

  /// The block height or index.
  var height: Int32 = 0

  /// The block version.
  var version: Int32 = 0

  /// The block version.
  var versionHex: String = String()

  /// The merkle root.
  var merkleroot: String = String()

  /// The block time in seconds since epoch (Jan 1 1970 GMT).
  var time: Int64 = 0

  /// The nonce.
  var nonce: UInt32 = 0

  /// The bits in hex notation.
  var bits: String = String()

  /// The number of transactions in the block.
  var ntx: Int32 = 0

  /// The hash of the previous block.
  var previousBlockHash: String = String()

  /// The raw hex of the block.
  var rawHex: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_GetBlockRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Block hash in hex notation.
  var hash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_GetBlockResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The block hash (same as provided).
  var hash: String = String()

  /// The number of confirmations.
  var confirmations: Int64 = 0

  /// The block size excluding witness data.
  var strippedSize: Int64 = 0

  /// The block size (bytes).
  var size: Int64 = 0

  /// The block weight as defined in BIP 141.
  var weight: Int64 = 0

  /// The block height or index.
  var height: Int32 = 0

  /// The block version.
  var version: Int32 = 0

  /// The block version.
  var versionHex: String = String()

  /// The merkle root.
  var merkleroot: String = String()

  /// List of transaction ids.
  var tx: [String] = []

  /// The block time in seconds since epoch (Jan 1 1970 GMT).
  var time: Int64 = 0

  /// The nonce.
  var nonce: UInt32 = 0

  /// The bits in hex notation.
  var bits: String = String()

  /// The number of transactions in the block.
  var ntx: Int32 = 0

  /// The hash of the previous block.
  var previousBlockHash: String = String()

  /// The raw hex of the block.
  var rawHex: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_GetCFilterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Block hash in hex notation.
  var hash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Neutrinorpc_GetCFilterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// GCS filter.
  var filter: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Neutrinorpc_StatusRequest: @unchecked Sendable {}
extension Neutrinorpc_StatusResponse: @unchecked Sendable {}
extension Neutrinorpc_AddPeerRequest: @unchecked Sendable {}
extension Neutrinorpc_AddPeerResponse: @unchecked Sendable {}
extension Neutrinorpc_DisconnectPeerRequest: @unchecked Sendable {}
extension Neutrinorpc_DisconnectPeerResponse: @unchecked Sendable {}
extension Neutrinorpc_IsBannedRequest: @unchecked Sendable {}
extension Neutrinorpc_IsBannedResponse: @unchecked Sendable {}
extension Neutrinorpc_GetBlockHeaderRequest: @unchecked Sendable {}
extension Neutrinorpc_GetBlockHeaderResponse: @unchecked Sendable {}
extension Neutrinorpc_GetBlockRequest: @unchecked Sendable {}
extension Neutrinorpc_GetBlockResponse: @unchecked Sendable {}
extension Neutrinorpc_GetCFilterRequest: @unchecked Sendable {}
extension Neutrinorpc_GetCFilterResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "neutrinorpc"

extension Neutrinorpc_StatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StatusRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_StatusRequest, rhs: Neutrinorpc_StatusRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_StatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "active"),
    2: .same(proto: "synced"),
    3: .standard(proto: "block_height"),
    4: .standard(proto: "block_hash"),
    5: .same(proto: "peers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.active) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.synced) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.blockHeight) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.blockHash) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.peers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.active != false {
      try visitor.visitSingularBoolField(value: self.active, fieldNumber: 1)
    }
    if self.synced != false {
      try visitor.visitSingularBoolField(value: self.synced, fieldNumber: 2)
    }
    if self.blockHeight != 0 {
      try visitor.visitSingularInt32Field(value: self.blockHeight, fieldNumber: 3)
    }
    if !self.blockHash.isEmpty {
      try visitor.visitSingularStringField(value: self.blockHash, fieldNumber: 4)
    }
    if !self.peers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.peers, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_StatusResponse, rhs: Neutrinorpc_StatusResponse) -> Bool {
    if lhs.active != rhs.active {return false}
    if lhs.synced != rhs.synced {return false}
    if lhs.blockHeight != rhs.blockHeight {return false}
    if lhs.blockHash != rhs.blockHash {return false}
    if lhs.peers != rhs.peers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_AddPeerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddPeerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peer_addrs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.peerAddrs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.peerAddrs.isEmpty {
      try visitor.visitSingularStringField(value: self.peerAddrs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_AddPeerRequest, rhs: Neutrinorpc_AddPeerRequest) -> Bool {
    if lhs.peerAddrs != rhs.peerAddrs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_AddPeerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddPeerResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_AddPeerResponse, rhs: Neutrinorpc_AddPeerResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_DisconnectPeerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DisconnectPeerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peer_addrs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.peerAddrs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.peerAddrs.isEmpty {
      try visitor.visitSingularStringField(value: self.peerAddrs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_DisconnectPeerRequest, rhs: Neutrinorpc_DisconnectPeerRequest) -> Bool {
    if lhs.peerAddrs != rhs.peerAddrs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_DisconnectPeerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DisconnectPeerResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_DisconnectPeerResponse, rhs: Neutrinorpc_DisconnectPeerResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_IsBannedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IsBannedRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peer_addrs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.peerAddrs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.peerAddrs.isEmpty {
      try visitor.visitSingularStringField(value: self.peerAddrs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_IsBannedRequest, rhs: Neutrinorpc_IsBannedRequest) -> Bool {
    if lhs.peerAddrs != rhs.peerAddrs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_IsBannedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IsBannedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "banned"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.banned) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.banned != false {
      try visitor.visitSingularBoolField(value: self.banned, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_IsBannedResponse, rhs: Neutrinorpc_IsBannedResponse) -> Bool {
    if lhs.banned != rhs.banned {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_GetBlockHeaderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetBlockHeaderRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_GetBlockHeaderRequest, rhs: Neutrinorpc_GetBlockHeaderRequest) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_GetBlockHeaderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetBlockHeaderResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "confirmations"),
    3: .standard(proto: "stripped_size"),
    4: .same(proto: "size"),
    5: .same(proto: "weight"),
    6: .same(proto: "height"),
    7: .same(proto: "version"),
    8: .standard(proto: "version_hex"),
    9: .same(proto: "merkleroot"),
    10: .same(proto: "time"),
    11: .same(proto: "nonce"),
    12: .same(proto: "bits"),
    13: .same(proto: "ntx"),
    14: .standard(proto: "previous_block_hash"),
    15: .standard(proto: "raw_hex"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.confirmations) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.strippedSize) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.size) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.weight) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.height) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.versionHex) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.merkleroot) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.time) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self.nonce) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.bits) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &self.ntx) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.previousBlockHash) }()
      case 15: try { try decoder.decodeSingularBytesField(value: &self.rawHex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if self.confirmations != 0 {
      try visitor.visitSingularInt64Field(value: self.confirmations, fieldNumber: 2)
    }
    if self.strippedSize != 0 {
      try visitor.visitSingularInt64Field(value: self.strippedSize, fieldNumber: 3)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 4)
    }
    if self.weight != 0 {
      try visitor.visitSingularInt64Field(value: self.weight, fieldNumber: 5)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 6)
    }
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 7)
    }
    if !self.versionHex.isEmpty {
      try visitor.visitSingularStringField(value: self.versionHex, fieldNumber: 8)
    }
    if !self.merkleroot.isEmpty {
      try visitor.visitSingularStringField(value: self.merkleroot, fieldNumber: 9)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 10)
    }
    if self.nonce != 0 {
      try visitor.visitSingularUInt32Field(value: self.nonce, fieldNumber: 11)
    }
    if !self.bits.isEmpty {
      try visitor.visitSingularStringField(value: self.bits, fieldNumber: 12)
    }
    if self.ntx != 0 {
      try visitor.visitSingularInt32Field(value: self.ntx, fieldNumber: 13)
    }
    if !self.previousBlockHash.isEmpty {
      try visitor.visitSingularStringField(value: self.previousBlockHash, fieldNumber: 14)
    }
    if !self.rawHex.isEmpty {
      try visitor.visitSingularBytesField(value: self.rawHex, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_GetBlockHeaderResponse, rhs: Neutrinorpc_GetBlockHeaderResponse) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.confirmations != rhs.confirmations {return false}
    if lhs.strippedSize != rhs.strippedSize {return false}
    if lhs.size != rhs.size {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.height != rhs.height {return false}
    if lhs.version != rhs.version {return false}
    if lhs.versionHex != rhs.versionHex {return false}
    if lhs.merkleroot != rhs.merkleroot {return false}
    if lhs.time != rhs.time {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.bits != rhs.bits {return false}
    if lhs.ntx != rhs.ntx {return false}
    if lhs.previousBlockHash != rhs.previousBlockHash {return false}
    if lhs.rawHex != rhs.rawHex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_GetBlockRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetBlockRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_GetBlockRequest, rhs: Neutrinorpc_GetBlockRequest) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_GetBlockResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetBlockResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "confirmations"),
    3: .standard(proto: "stripped_size"),
    4: .same(proto: "size"),
    5: .same(proto: "weight"),
    6: .same(proto: "height"),
    7: .same(proto: "version"),
    8: .standard(proto: "version_hex"),
    9: .same(proto: "merkleroot"),
    10: .same(proto: "tx"),
    11: .same(proto: "time"),
    12: .same(proto: "nonce"),
    13: .same(proto: "bits"),
    14: .same(proto: "ntx"),
    15: .standard(proto: "previous_block_hash"),
    16: .standard(proto: "raw_hex"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.confirmations) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.strippedSize) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.size) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.weight) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.height) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.versionHex) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.merkleroot) }()
      case 10: try { try decoder.decodeRepeatedStringField(value: &self.tx) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.time) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self.nonce) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.bits) }()
      case 14: try { try decoder.decodeSingularInt32Field(value: &self.ntx) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.previousBlockHash) }()
      case 16: try { try decoder.decodeSingularBytesField(value: &self.rawHex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if self.confirmations != 0 {
      try visitor.visitSingularInt64Field(value: self.confirmations, fieldNumber: 2)
    }
    if self.strippedSize != 0 {
      try visitor.visitSingularInt64Field(value: self.strippedSize, fieldNumber: 3)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 4)
    }
    if self.weight != 0 {
      try visitor.visitSingularInt64Field(value: self.weight, fieldNumber: 5)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 6)
    }
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 7)
    }
    if !self.versionHex.isEmpty {
      try visitor.visitSingularStringField(value: self.versionHex, fieldNumber: 8)
    }
    if !self.merkleroot.isEmpty {
      try visitor.visitSingularStringField(value: self.merkleroot, fieldNumber: 9)
    }
    if !self.tx.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tx, fieldNumber: 10)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 11)
    }
    if self.nonce != 0 {
      try visitor.visitSingularUInt32Field(value: self.nonce, fieldNumber: 12)
    }
    if !self.bits.isEmpty {
      try visitor.visitSingularStringField(value: self.bits, fieldNumber: 13)
    }
    if self.ntx != 0 {
      try visitor.visitSingularInt32Field(value: self.ntx, fieldNumber: 14)
    }
    if !self.previousBlockHash.isEmpty {
      try visitor.visitSingularStringField(value: self.previousBlockHash, fieldNumber: 15)
    }
    if !self.rawHex.isEmpty {
      try visitor.visitSingularBytesField(value: self.rawHex, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_GetBlockResponse, rhs: Neutrinorpc_GetBlockResponse) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.confirmations != rhs.confirmations {return false}
    if lhs.strippedSize != rhs.strippedSize {return false}
    if lhs.size != rhs.size {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.height != rhs.height {return false}
    if lhs.version != rhs.version {return false}
    if lhs.versionHex != rhs.versionHex {return false}
    if lhs.merkleroot != rhs.merkleroot {return false}
    if lhs.tx != rhs.tx {return false}
    if lhs.time != rhs.time {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.bits != rhs.bits {return false}
    if lhs.ntx != rhs.ntx {return false}
    if lhs.previousBlockHash != rhs.previousBlockHash {return false}
    if lhs.rawHex != rhs.rawHex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_GetCFilterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetCFilterRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_GetCFilterRequest, rhs: Neutrinorpc_GetCFilterRequest) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Neutrinorpc_GetCFilterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetCFilterResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "filter"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.filter) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filter.isEmpty {
      try visitor.visitSingularBytesField(value: self.filter, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutrinorpc_GetCFilterResponse, rhs: Neutrinorpc_GetCFilterResponse) -> Bool {
    if lhs.filter != rhs.filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
