// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: peersrpc/peers.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// UpdateAction is used to determine the kind of action we are referring to.
enum Peersrpc_UpdateAction: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// ADD indicates this is an "insertion" kind of action.
  case add // = 0

  /// REMOVE indicates this is a "deletion" kind of action.
  case remove // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .add
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .add
    case 1: self = .remove
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .add: return 0
    case .remove: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Peersrpc_UpdateAction: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Peersrpc_UpdateAction] = [
    .add,
    .remove,
  ]
}

#endif  // swift(>=4.2)

enum Peersrpc_FeatureSet: SwiftProtobuf.Enum {
  typealias RawValue = Int

  ///
  ///SET_INIT identifies features that should be sent in an Init message to
  ///a remote peer.
  case setInit // = 0

  ///
  ///SET_LEGACY_GLOBAL identifies features that should be set in the legacy
  ///GlobalFeatures field of an Init message, which maintains backwards
  ///compatibility with nodes that haven't implemented flat features.
  case setLegacyGlobal // = 1

  ///
  ///SET_NODE_ANN identifies features that should be advertised on node
  ///announcements.
  case setNodeAnn // = 2

  ///
  ///SET_INVOICE identifies features that should be advertised on invoices
  ///generated by the daemon.
  case setInvoice // = 3

  ///
  ///SET_INVOICE_AMP identifies the features that should be advertised on
  ///AMP invoices generated by the daemon.
  case setInvoiceAmp // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .setInit
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .setInit
    case 1: self = .setLegacyGlobal
    case 2: self = .setNodeAnn
    case 3: self = .setInvoice
    case 4: self = .setInvoiceAmp
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .setInit: return 0
    case .setLegacyGlobal: return 1
    case .setNodeAnn: return 2
    case .setInvoice: return 3
    case .setInvoiceAmp: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Peersrpc_FeatureSet: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Peersrpc_FeatureSet] = [
    .setInit,
    .setLegacyGlobal,
    .setNodeAnn,
    .setInvoice,
    .setInvoiceAmp,
  ]
}

#endif  // swift(>=4.2)

struct Peersrpc_UpdateAddressAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Determines the kind of action.
  var action: Peersrpc_UpdateAction = .add

  /// The address used to apply the update action.
  var address: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Peersrpc_UpdateFeatureAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Determines the kind of action.
  var action: Peersrpc_UpdateAction = .add

  /// The feature bit used to apply the update action.
  var featureBit: Lnrpc_FeatureBit = .datalossProtectReq

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Peersrpc_NodeAnnouncementUpdateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Set of changes for the features that the node supports.
  var featureUpdates: [Peersrpc_UpdateFeatureAction] = []

  /// Color is the node's color in hex code format.
  var color: String = String()

  /// Alias or nick name of the node.
  var alias: String = String()

  /// Set of changes for the node's known addresses.
  var addressUpdates: [Peersrpc_UpdateAddressAction] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Peersrpc_NodeAnnouncementUpdateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ops: [Lnrpc_Op] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Peersrpc_UpdateAction: @unchecked Sendable {}
extension Peersrpc_FeatureSet: @unchecked Sendable {}
extension Peersrpc_UpdateAddressAction: @unchecked Sendable {}
extension Peersrpc_UpdateFeatureAction: @unchecked Sendable {}
extension Peersrpc_NodeAnnouncementUpdateRequest: @unchecked Sendable {}
extension Peersrpc_NodeAnnouncementUpdateResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "peersrpc"

extension Peersrpc_UpdateAction: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ADD"),
    1: .same(proto: "REMOVE"),
  ]
}

extension Peersrpc_FeatureSet: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SET_INIT"),
    1: .same(proto: "SET_LEGACY_GLOBAL"),
    2: .same(proto: "SET_NODE_ANN"),
    3: .same(proto: "SET_INVOICE"),
    4: .same(proto: "SET_INVOICE_AMP"),
  ]
}

extension Peersrpc_UpdateAddressAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateAddressAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.action != .add {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Peersrpc_UpdateAddressAction, rhs: Peersrpc_UpdateAddressAction) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Peersrpc_UpdateFeatureAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateFeatureAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .standard(proto: "feature_bit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.featureBit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.action != .add {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 1)
    }
    if self.featureBit != .datalossProtectReq {
      try visitor.visitSingularEnumField(value: self.featureBit, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Peersrpc_UpdateFeatureAction, rhs: Peersrpc_UpdateFeatureAction) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.featureBit != rhs.featureBit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Peersrpc_NodeAnnouncementUpdateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NodeAnnouncementUpdateRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_updates"),
    2: .same(proto: "color"),
    3: .same(proto: "alias"),
    4: .standard(proto: "address_updates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.featureUpdates) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.color) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.alias) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.addressUpdates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featureUpdates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.featureUpdates, fieldNumber: 1)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 2)
    }
    if !self.alias.isEmpty {
      try visitor.visitSingularStringField(value: self.alias, fieldNumber: 3)
    }
    if !self.addressUpdates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addressUpdates, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Peersrpc_NodeAnnouncementUpdateRequest, rhs: Peersrpc_NodeAnnouncementUpdateRequest) -> Bool {
    if lhs.featureUpdates != rhs.featureUpdates {return false}
    if lhs.color != rhs.color {return false}
    if lhs.alias != rhs.alias {return false}
    if lhs.addressUpdates != rhs.addressUpdates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Peersrpc_NodeAnnouncementUpdateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NodeAnnouncementUpdateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ops"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.ops) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ops.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ops, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Peersrpc_NodeAnnouncementUpdateResponse, rhs: Peersrpc_NodeAnnouncementUpdateResponse) -> Bool {
    if lhs.ops != rhs.ops {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
